{"version":3,"sources":["serviceWorker.js","GetPokemon/GetPokemon.jsx","index.js"],"names":["Boolean","window","location","hostname","match","GetPokemon","useState","num","setNum","name","setName","loading","setLoading","pokiAPI","a","axios","get","then","data","console","log","useEffect","Fragment","className","role","id","value","onChange","event","target","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDC2CSC,G,MAzDI,WAAO,IAAD,EACDC,mBAAS,IADR,mBAChBC,EADgB,KACXC,EADW,OAECF,mBAAS,IAFV,mBAEhBG,EAFgB,KAEVC,EAFU,OAGOJ,mBAAS,MAHhB,mBAGhBK,EAHgB,KAGPC,EAHO,KAKjBC,EAAO,uCAAG,sBAAAC,EAAA,+EAEOC,IAChBC,IADgB,4CACyBT,IACzCU,MAAK,SAACC,GACLR,EAAQQ,EAAKA,KAAKT,MAClBG,GAAW,MANH,6DASZO,QAAQC,IAAR,MATY,wDAAH,qDAwBb,OAXAC,qBAAU,WACRR,OAWA,kBAAC,IAAMS,SAAP,KACE,2CAAiBf,GAChBI,EACC,8CAAoBF,GAEpB,yBAAKc,UAAU,iBAAiBC,KAAK,UACnC,0BAAMD,UAAU,WAAhB,eAGJ,4BACEd,KAAK,GACLgB,GAAG,GACHC,MAAOnB,EACPoB,SAAU,SAACC,GACTpB,EAAOoB,EAAMC,OAAOH,SAGtB,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,SCrCRI,IAASC,OACP,oCAQE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.b3db01de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nconst GetPokemon = () => {\r\n  const [num, setNum] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [loading, setLoading] = useState(null);\r\n\r\n  const pokiAPI = async () => {\r\n    try {\r\n      const data = await axios\r\n        .get(`https://pokeapi.co/api/v2/pokemon/${num}`)\r\n        .then((data) => {\r\n          setName(data.data.name);\r\n          setLoading(true);\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    pokiAPI();\r\n  });\r\n\r\n  //   useEffect(() => {\r\n  //     async function getData() {\r\n  //       const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${num}`);\r\n  //       console.log(res);\r\n  //     }\r\n  //     getData();\r\n  //   });\r\n  return (\r\n    <React.Fragment>\r\n      <h1>You chose : {num}</h1>\r\n      {loading ? (\r\n        <h2>Pokemon name : {name}</h2>\r\n      ) : (\r\n        <div className=\"spinner-border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      )}\r\n      <select\r\n        name=\"\"\r\n        id=\"\"\r\n        value={num}\r\n        onChange={(event) => {\r\n          setNum(event.target.value);\r\n        }}\r\n      >\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n        <option value=\"5\">5</option>\r\n      </select>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GetPokemon;\r\n","// **********Packages Imports*******************************\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n// rafce => Functional component ; rce => Class component\n\n// **********COMPONENT IMPORTS***************************\n\n// import TimerTick from './TimerTick/TimerTick';\n// import App from './App';\n// import ReactRouterDemo from './ReactRouter/ReactRouterDemo';\n// import GeekyShowDemo from './GeekyShowDemo/GeekyShowDemo'\n// import WelcomeMessage from './WelcomeMessage/WelcomeMessage'\n// import SpinnerLoader from './SpinnerLoader/SpinnerLoader'\n// import LearnBootstrap from './LearnBootstrap/LearnBootstrap';\nimport GetPokemon from \"./GetPokemon/GetPokemon\";\n\n// ---------------------------------------------------------------------------------------------\nReactDOM.render(\n  <>\n    {/* <ReactRouterDemo/> */}\n    {/* <App /> */}\n    {/* <GeekyShowDemo age=\"50\"></GeekyShowDemo> */}\n    {/* <WelcomeMessage/> */}\n    {/* <SpinnerLoader/> */}\n    {/* <LearnBootstrap/> */}\n    {/* <TimerTick/> */}\n    <GetPokemon />\n  </>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}