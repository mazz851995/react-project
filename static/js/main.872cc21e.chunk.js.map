{"version":3,"sources":["serviceWorker.js","Person/Person.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Person","className","style","width","background","onClick","this","props","click","name","age","onChange","changed","type","value","Component","Radium","App","state","persons","id","showPersons","changehandler","event","personIndex","findIndex","p","person","target","setState","togglePersons","show","deleteHandler","index","splice","btnStyle","padding","color","border","outline","showP","map","key","classes","length","push","Fragment","join","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oECdAC,E,uKAQE,OACI,yBAAKC,UAAU,YAAYC,MAPnB,CACR,6BAA+B,CAC3BC,MAAQ,QACRC,WAAa,UAKb,wBAAIC,QAASC,KAAKC,MAAMC,OAAxB,QAAqCF,KAAKC,MAAME,KAAhD,aAAgEH,KAAKC,MAAMG,IAA3E,YACA,2BAAOC,SAAYL,KAAKC,MAAMK,QAASC,KAAK,OAAOC,MAAOR,KAAKC,MAAME,Y,GAXhEM,aAiBNC,cAAOhB,G,gBChBhBiB,E,4MACJC,MAAQ,CACJC,QAAU,CACR,CAACC,GAAG,IAAKX,KAAO,MAAOC,IAAM,IAC7B,CAACU,GAAG,IAAKX,KAAO,OAAQC,IAAM,IAC9B,CAACU,GAAG,IAAKX,KAAO,UAAWC,IAAM,IACjC,CAACU,GAAG,IAAKX,KAAO,QAASC,IAAM,KAEjCW,aAAc,G,EAGpBC,cAAgB,SAACC,EAAOH,GACtB,IAAMI,EAAc,EAAKN,MAAMC,QAAQM,WAAU,SAAAC,GAC/C,OAAOA,EAAEN,KAAOA,KAEZO,EAAM,eAAO,EAAKT,MAAMC,QAAQK,IACtCG,EAAOlB,KAAOc,EAAMK,OAAOd,MAC3B,IAAMK,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQK,GAAeG,EACvB,EAAKE,SAAS,CAACV,QAAQA,K,EAGzBW,cAAe,WACb,IAAMC,EAAO,EAAKb,MAAMG,YACxB,EAAKQ,SAAS,CAACR,aAAaU,K,EAG9BC,cAAgB,SAACC,GACf,IAAMd,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQe,OAAOD,EAAO,GACtB,EAAKJ,SAAS,CAACV,QAAQA,K,uDAEf,IAAD,OACDgB,EAAS,CACX/B,WAAa,QACbgC,QAAU,YACVC,MAAO,QACPC,OAAS,OACTC,QAAU,OACV,SAAW,CACRnC,WAAa,SAGdoC,EAAQ,GACTlC,KAAKY,MAAMG,aACZmB,EAAQ,6BACPlC,KAAKY,MAAMC,QAAQsB,KAAI,SAACd,EAAQM,GAC/B,OAAO,kBAAC,EAAD,CACPrB,QAAS,SAACW,GAAD,OAAS,EAAKD,cAAcC,EAAOI,EAAOP,KACnDZ,MAAS,kBAAI,EAAKwB,cAAcC,IAChCxB,KAAMkB,EAAOlB,KACbC,IAAOiB,EAAOjB,IACdgC,IAAKf,EAAOP,SAKde,EAAS/B,WAAa,MACtB+B,EAAS,UAAY,CACnB/B,WAAW,WAGboC,EAAQ,GAIV,IAAIG,EAAU,GAQd,OAPGrC,KAAKY,MAAMC,QAAQyB,QAAU,GAC9BD,EAAQE,KAAK,OAGZvC,KAAKY,MAAMC,QAAQyB,QAAU,GAC9BD,EAAQE,KAAK,QAGb,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,KACE,wBAAI7C,UAAW0C,EAAQI,KAAK,MAA5B,cACA,4BAAQ7C,MAAOiC,EAAU9B,QAAWC,KAAKwB,eAAzC,QACEU,Q,GA/EMzB,aAqFHC,cAAOC,GCxEtB+B,IAASC,OACP,oCAEE,kBAAC,EAAD,OAQFC,SAASC,eAAe,SHsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.872cc21e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react'\r\nimport './Person.css'\r\nimport Radium from 'radium'\r\n\r\nclass Person extends Component {\r\n    render() {\r\n        const style={\r\n            '@media (min-width : 500px)' : {\r\n                width : '500px',\r\n                background : \"pink\"\r\n            }   \r\n        }\r\n        return (\r\n            <div className=\"outer_div\" style={style}>                \r\n                <h3 onClick={this.props.click}>I am {this.props.name} and I am {this.props.age} yrs old</h3>\r\n                <input onChange = {this.props.changed} type=\"text\" value={this.props.name}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Radium(Person);","import React, { Component } from 'react'\nimport Person from './Person/Person'\nimport './App.css'\nimport Radium, {StyleRoot} from 'radium'\n\nclass App extends Component {\n  state = {\n      persons : [\n        {id:\"1\", name : \"Max\", age : 28},\n        {id:\"2\", name : \"Manu\", age : 25},\n        {id:\"3\", name : \"Stephan\", age : 18},\n        {id:\"4\", name : \"Deamo\", age : 48}\n      ],\n      showPersons : true\n  }\n  \nchangehandler = (event, id) => {\n  const personIndex = this.state.persons.findIndex(p=>{\n    return p.id === id\n  })\n  const person = {...this.state.persons[personIndex]};\n  person.name = event.target.value;\n  const persons = [...this.state.persons]\n  persons[personIndex] = person\n  this.setState({persons:persons})\n  \n}\ntogglePersons =() =>{\n  const show = this.state.showPersons;\n  this.setState({showPersons:!show})\n}\n\ndeleteHandler = (index)=>{\n  const persons = [...this.state.persons];\n  persons.splice(index, 1);\n  this.setState({persons:persons})\n}\nrender() {\n  const btnStyle={\n      background : \"green\",\n      padding : \"10px 20px\",\n      color: \"white\",\n      border : \"none\",\n      outline : \"none\",\n      ':hover' : {\n         background : \"pink\"\n      }\n  }\n    let showP = '';\n    if(this.state.showPersons){\n      showP = <div>\n      {this.state.persons.map((person, index) => {\n        return <Person\n        changed={(event)=>this.changehandler(event, person.id)}\n        click = {()=>this.deleteHandler(index)}\n        name={person.name}\n        age = {person.age}\n        key={person.id}>\n\n        </Person>        \n      })} \n      </div>\n      btnStyle.background = \"red\"\n      btnStyle[':hover'] = {\n        background:\"orange\"\n      }\n    }else{\n      showP = \"\";\n    }\n\n    // Add Dynamic Class Logic\n    let classes = [];\n    if(this.state.persons.length <= 2){\n      classes.push(\"red\");\n    }\n\n    if(this.state.persons.length <= 1){\n      classes.push(\"bold\");\n    }\n    return (\n      <StyleRoot>\n        <React.Fragment>        \n          <h1 className={classes.join(' ')}>React Demo</h1>\n          <button style={btnStyle} onClick = {this.togglePersons}>Hide</button>\n          { showP }\n        </React.Fragment>\n      </StyleRoot>\n    )\n  }\n}\nexport default Radium(App);","// **********Packages Imports*******************************\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n// rafce => Functional component ; rce => Class component\n\n// **********COMPONENT IMPORTS***************************\n\n// import TimerTick from './TimerTick/TimerTick';\nimport App from \"./App\";\n// import ReactRouterDemo from './ReactRouter/ReactRouterDemo';\n// import GeekyShowDemo from './GeekyShowDemo/GeekyShowDemo'\n// import WelcomeMessage from \"./WelcomeMessage/WelcomeMessage\";\n// import SpinnerLoader from './SpinnerLoader/SpinnerLoader'\n// import LearnBootstrap from './LearnBootstrap/LearnBootstrap';\n// import GetPokemon from \"./GetPokemon/GetPokemon\";\n\n// ---------------------------------------------------------------------------------------------\nReactDOM.render(\n  <>\n    {/* <ReactRouterDemo/> */}\n    <App />\n    {/* <GeekyShowDemo age=\"50\"></GeekyShowDemo> */}\n    {/* <WelcomeMessage /> */}\n    {/* <SpinnerLoader/> */}\n    {/* <LearnBootstrap/> */}\n    {/* <TimerTick/> */}\n    {/* <GetPokemon /> */}\n  </>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}